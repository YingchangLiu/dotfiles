#!/usr/bin/env bash
#
# spark
# https://github.com/holman/spark
#
# Generates sparklines for a set of data.
#
# Here's a good web-based sparkline generator that was a bit of inspiration
# for spark:
#
#   https://datacollective.org/sparkblocks
#
# spark takes a comma-separated or space-separated list of data and then prints
# a sparkline out of it.
#
# Examples:
#
#   spark 1 5 22 13 53
#   # => ▁▁▃▂▇
#
#   spark 0 30 55 80 33 150
#   # => ▁▂▃▅▂▇
#
#   spark -h
#   # => Prints the spark help text.

# Generates sparklines.
#
# $1 - The data we'd like to graph.
_echo()
{
  if [ "X$1" = "X-n" ]; then
    shift
    printf "%s" "$*"
  else
    printf "%s\n" "$*"
  fi
}

spark()
{
  local n numbers=

  # find min/max values
  local min=0xffffffff max=0

  for n in ${@//,/ }
  do
    # on Linux (or with bash4) we could use `printf %.0f $n` here to
    # round the number but that doesn't work on OS X (bash3) nor does
    # `awk '{printf "%.0f",$1}' <<< $n` work, so just cut it off
    n=${n%.*}
    (( n < min )) && min=$n
    (( n > max )) && max=$n
    numbers=$numbers${numbers:+ }$n
  done

  # print ticks
  local ticks=(▁ ▂ ▃ ▄ ▅ ▆ ▇ █)

  # use a high tick if data is constant
  (( min == max )) && ticks=(▅ ▆)

  local f=$(( (($max-$min)<<8)/(${#ticks[@]}-1) ))
  (( f < 1 )) && f=1

  for n in $numbers
  do
    _echo -n ${ticks[$(( ((($n-$min)<<8)/$f) ))]}
  done
  _echo
}

# If we're being sourced, don't worry about such things
# Prints the help text for spark.
help()
{
  local spark=$(basename $0)
  cat <<EOF

  USAGE:
    $spark [-h|--help] VALUE,...
    $spark [-c|--cpu]
    $spark [-e|--earthquake]
    $spark [-g|--git]
    $spark [-m|--memory]
    $spark [-r|--random] [COUNT]


  EXAMPLES:
    $spark 1 5 22 13 53
    ▁▁▃▂█
    $spark 0,30,55,80,33,150
    ▁▂▃▄▂█
    echo 9 13 5 17 1 | $spark
    ▄▆▂█▁
    $spark -e
    (Generates a sparkline for earthquake magnitudes)
    $spark -c
    (Generates a sparkline for CPU usage)
    $spark -g
    (Generates a sparkline for Git commit counts)
    $spark -m
    (Generates a sparkline for memory usage)
    $spark -r 20
    (Generates a sparkline for 20 random numbers)


EOF
}

# show help for no arguments if stdin is a terminal
if { [ -z "$1" ] && [ -t 0 ] ; } || [ "$1" == '-h' ] || [ "$1" == '--help' ]
  then
    help
    exit 0
  elif [ "$1" == "-e" ] || [ "$1" == "--earthquake" ]; then
    # Example: Fetch earthquake data and generate sparkline
    curl -s https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_day.csv |
      sed '1d' |
      cut -d, -f5 |
      bash "$0"
    exit 0
  elif [ "$1" == "-g" ] || [ "$1" == "--git" ]; then
    # Example: Generate sparkline for Git commit counts
    git shortlog -s |
      cut -f1 |
      bash "$0"
    exit 0
  elif [ "$1" == "-r" ] || [ "$1" == "--random" ]; then
    # Example: Generate sparkline for random numbers
    count=${2:-10} # Default to 10 random numbers if not specified
    seq 1 $count | xargs -I{} sh -c 'echo $((RANDOM % 100))' |
      bash "$0"
    exit 0
  elif [ "$1" == "-c" ] || [ "$1" == "--cpu" ]; then
    # Example: Generate sparkline for CPU usage
    mpstat 1 5 | awk '/all/ {print 100 - $12}' | tail -n +2 |
      bash "$0"
    exit 0
  elif [ "$1" == "-m" ] || [ "$1" == "--memory" ]; then
    # Example: Generate sparkline for memory usage
    free -m | awk '/Mem:/ {print $3/$2 * 100}' |
      bash "$0"
    exit 0
fi

spark ${@:-`cat`}